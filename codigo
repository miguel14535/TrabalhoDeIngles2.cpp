//Este trecho define variáveis inteiras e as inicializa com valores específicos.
int soma = 13;
int carryBit = 0;
int nib1a,nib1b,nib1c,nib1d = 0;
int nib2a,nib2b,nib2c,nib2d = 0;
int res1a,res1b,res1c,res1d = 0;

//Este código configura os pinos de um microcontrolador, definindo alguns como entrada e outros como saída, usando a função setup().

void setup()
{
	pinMode(0, INPUT);
	pinMode(1, INPUT);
	pinMode(2, INPUT);
	pinMode(3, INPUT);
	pinMode(4, INPUT);
	pinMode(5, INPUT);
	pinMode(6, INPUT);
	pinMode(7, INPUT);
	pinMode(8, OUTPUT);
	pinMode(9, OUTPUT);
	pinMode(10, OUTPUT);
	pinMode(11, OUTPUT);
	pinMode(12, OUTPUT);
	pinMode(13, INPUT);
}

//Este código implementa uma função que calcula um bit de soma com base em três entradas: dois bits e um bit de transporte. O resultado é calculado usando operações lógicas XOR e retorna o resultado do bit de soma.
int somaBit(int b1a, int b2a, int cBit)
{
	int bitResult = 0;
	int aux1, aux2 = 0;
	if ((b1a ^ b2a) ^ cBit)
	{
		bitResult = 1;
	}
	else
	{
		bitResult = 0;
	}
	return bitResult;
}
//A função calcula o bit de transporte para uma soma binária, considerando os bits de entrada e um bit de transporte anterior, usando operações lógicas simples.
int somaCarryBit(int b1a, int b2a, int cBit)
{
	int aux1, aux2 = 0;
	if ((b1a && b2a)||(b1a && cBit)||(b2a && cBit))
	{
		cBit = 1;
	}
	else
	{
		cBit = 0;
	}
	return cBit;
}

void loop()
//Lê os estados dos pinos digitais atribuindo os valores lidos a variáveis correspondentes e, se o estado do pino 13 for 1, executa as instruções dentro do bloco `if`.
{
	soma = digitalRead(13);
	nib1a = digitalRead(0);
	nib1b = digitalRead(1);
	nib1c = digitalRead(2);
	nib1d = digitalRead(3);
	nib2a = digitalRead(4);
	nib2b = digitalRead(5);
	nib2c = digitalRead(6);
	nib2d = digitalRead(7);
	if (soma == 1)
	{
		//Zera o bit de transporte e calcula os bits de soma e atualiza o bit de transporte para cada par de bits, usando funções específicas, dentro de um bloco `if`.
		carryBit = 0;
		res1a = somaBit(nib1a,nib2a,carryBit);
		carryBit = somaCarryBit(nib1a,nib2a,carryBit);
		res1b = somaBit(nib1b,nib2b,carryBit);
		carryBit = somaCarryBit(nib1b,nib2b,carryBit);
		res1c = somaBit(nib1c,nib2c,carryBit);
		carryBit = somaCarryBit(nib1c,nib2c,carryBit);
		res1d = somaBit(nib1d,nib2d,carryBit);
		carryBit = somaCarryBit(nib1d,nib2d,carryBit);
	}
	//Escreve os resultados dos bits de soma (`res1a`, `res1b`, `res1c`, `res1d`) nos pinos de saída 8 a 11, e o resultado do bit de transporte (`carryBit`) no pino de saída 12, encerrando a função `loop()`.
	digitalWrite(8,res1a);
	digitalWrite(9,res1b);
	digitalWrite(10,res1c);
	digitalWrite(11,res1d);
	digitalWrite(12,carryBit);
}
